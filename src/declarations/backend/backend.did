type http_request_result = 
 record {
   body: blob;
   headers: vec http_header;
   status: nat;
 };
type http_header = 
 record {
   name: text;
   value: text;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type OnThisDay = 
 record {
   title: text;
   wikiLink: text;
   year: text;
 };
type Note = 
 record {
   content: text;
   id: nat;
   isCompleted: bool;
 };
type DayData = 
 record {
   notes: vec Note;
   onThisDay: opt OnThisDay;
 };
type AddNoteResult = 
 variant {
   err: text;
   ok: text;
 };
service : {
  addNote: (text, text) -> (AddNoteResult);
  completeNote: (text, nat) -> ();
  fetchAndStoreOnThisDay: (text) -> (Result);
  getDayData: (text) -> (opt DayData) query;
  getMonthData: (nat, nat) -> (vec record {
                                     text;
                                     DayData;
                                   }) query;
  transform: (record {
                context: blob;
                response: http_request_result;
              }) -> (http_request_result) query;
}
